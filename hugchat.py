# hugchat.py ‚Äî –∫–ª—ñ—î–Ω—Ç –¥–ª—è HuggingChat API

import requests
import json
from typing import Dict, List, Optional


class ChatBot:
    def __init__(self, cookie_path: str):
        self.cookie_path = cookie_path
        self.cookies = self.load_cookies()
        self.headers = {
            "User-Agent": "Mozilla/5.0",
            "Referer": "https://huggingface.co/chat/", 
            "Content-Type": "application/json",
        }
        self.conversation_id = None

    def load_cookies(self) -> dict:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î cookies —ñ–∑ —Ñ–∞–π–ª—É JSON –∞–±–æ TXT.
        –Ø–∫—â–æ —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ Netscape ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Å–ª–æ–≤–Ω–∏–∫.
        """
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —è–∫ JSON (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ Cookie Editor)
            with open(self.cookie_path, "r", encoding="utf-8") as f:
                data = f.read().strip()

            # –Ø–∫—â–æ —Ü–µ JSON –º–∞—Å–∏–≤ —ñ–∑ –æ–±'—î–∫—Ç–∞–º–∏
            try:
                cookies_json = json.loads(data)
                cookie_dict = {c["name"]: c["value"] for c in cookies_json}
                return cookie_dict
            except json.JSONDecodeError:
                # –Ø–∫—â–æ –Ω–µ JSON, –ø—Ä–∏–ø—É—Å—Ç–∏–º–æ –ø—Ä–æ—Å—Ç–∏–π —Ñ–æ—Ä–º–∞—Ç name=value
                lines = data.splitlines()
                cookie_dict = {}
                for line in lines:
                    if "=" in line:
                        key, value = line.strip().split("=", 1)
                        cookie_dict[key] = value
                return cookie_dict

        except Exception as e:
            raise FileNotFoundError(f"–ù–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –∞–±–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª cookie: {self.cookie_path}. –ü–æ–º–∏–ª–∫–∞: {e}")

    def query(self, prompt: str) -> str:
        """
        –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–∞–ø–∏—Ç –¥–æ HuggingChat —á–µ—Ä–µ–∑ POST-–∑–∞–ø–∏—Ç
        """

        url = "https://huggingface.co/chat/" 
        payload = {
            "inputs": prompt,
            "parameters": {"temperature": 0.8},
            "options": {"use_cache": False, "is_retry": False, "use_stream": True}
        }

        print(f"[DEBUG] –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–æ HuggingChat...")  # üîç –î–æ–¥–∞–Ω–æ –ª–æ–≥
        response = requests.post(
            url,
            json=payload,
            headers=self.headers,
            cookies=self.cookies,
            timeout=30
        )

        print(f"[DEBUG] –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç–∞—Ç—É—Å: {response.status_code}")  # üîç –õ–æ–≥ —Å—Ç–∞—Ç—É—Å—É
        print(f"[DEBUG] –í—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–µ–∫—Å—Ç: {response.text[:200]}...")  # üîç –ü–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤

        if response.status_code == 200:
            try:
                return response.json().get("generated_text", "–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –∑–∞–ø–∏—Ç—É")
            except json.JSONDecodeError:
                return "–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"
        else:
            return f"[–ü–æ–º–∏–ª–∫–∞] –ö–æ–¥: {response.status_code}, –¢–µ–∫—Å—Ç: {response.text[:100]}"